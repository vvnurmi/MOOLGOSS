/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moolgoss.service {

import org.apache.thrift.Set;
import flash.utils.ByteArray;
import flash.utils.Dictionary;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


  public class Formation implements TBase   {
    private static const STRUCT_DESC:TStruct = new TStruct("Formation");
    private static const ID_FIELD_DESC:TField = new TField("id", TType.I32, 1);
    private static const PLAYER_FIELD_DESC:TField = new TField("player", TType.STRING, 2);
    private static const LOCATION_FIELD_DESC:TField = new TField("location", TType.STRUCT, 3);
    private static const SHIPS_FIELD_DESC:TField = new TField("ships", TType.I32, 4);

    private var _id:int;
    public static const ID:int = 1;
    private var _player:String;
    public static const PLAYER:int = 2;
    private var _location:Location;
    public static const LOCATION:int = 3;
    private var _ships:int;
    public static const SHIPS:int = 4;

    private var __isset_id:Boolean = false;
    private var __isset_ships:Boolean = false;

    public static const metaDataMap:Dictionary = new Dictionary();
    {
      metaDataMap[ID] = new FieldMetaData("id", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32));
      metaDataMap[PLAYER] = new FieldMetaData("player", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[LOCATION] = new FieldMetaData("location", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, Location));
      metaDataMap[SHIPS] = new FieldMetaData("ships", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32));
    }
    {
      FieldMetaData.addStructMetaDataMap(Formation, metaDataMap);
    }

    public function Formation() {
    }

    public function get id():int {
      return this._id;
    }

    public function set id(id:int):void {
      this._id = id;
      this.__isset_id = true;
    }

    public function unsetId():void {
      this.__isset_id = false;
    }

    // Returns true if field id is set (has been assigned a value) and false otherwise
    public function isSetId():Boolean {
      return this.__isset_id;
    }

    public function get player():String {
      return this._player;
    }

    public function set player(player:String):void {
      this._player = player;
    }

    public function unsetPlayer():void {
      this.player = null;
    }

    // Returns true if field player is set (has been assigned a value) and false otherwise
    public function isSetPlayer():Boolean {
      return this.player != null;
    }

    public function get location():Location {
      return this._location;
    }

    public function set location(location:Location):void {
      this._location = location;
    }

    public function unsetLocation():void {
      this.location = null;
    }

    // Returns true if field location is set (has been assigned a value) and false otherwise
    public function isSetLocation():Boolean {
      return this.location != null;
    }

    public function get ships():int {
      return this._ships;
    }

    public function set ships(ships:int):void {
      this._ships = ships;
      this.__isset_ships = true;
    }

    public function unsetShips():void {
      this.__isset_ships = false;
    }

    // Returns true if field ships is set (has been assigned a value) and false otherwise
    public function isSetShips():Boolean {
      return this.__isset_ships;
    }

    public function setFieldValue(fieldID:int, value:*):void {
      switch (fieldID) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          this.id = value;
        }
        break;

      case PLAYER:
        if (value == null) {
          unsetPlayer();
        } else {
          this.player = value;
        }
        break;

      case LOCATION:
        if (value == null) {
          unsetLocation();
        } else {
          this.location = value;
        }
        break;

      case SHIPS:
        if (value == null) {
          unsetShips();
        } else {
          this.ships = value;
        }
        break;

      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function getFieldValue(fieldID:int):* {
      switch (fieldID) {
      case ID:
        return this.id;
      case PLAYER:
        return this.player;
      case LOCATION:
        return this.location;
      case SHIPS:
        return this.ships;
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public function isSet(fieldID:int):Boolean {
      switch (fieldID) {
      case ID:
        return isSetId();
      case PLAYER:
        return isSetPlayer();
      case LOCATION:
        return isSetLocation();
      case SHIPS:
        return isSetShips();
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function read(iprot:TProtocol):void {
      var field:TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case ID:
            if (field.type == TType.I32) {
              this.id = iprot.readI32();
              this.__isset_id = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case PLAYER:
            if (field.type == TType.STRING) {
              this.player = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case LOCATION:
            if (field.type == TType.STRUCT) {
              this.location = new Location();
              this.location.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case SHIPS:
            if (field.type == TType.I32) {
              this.ships = iprot.readI32();
              this.__isset_ships = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public function write(oprot:TProtocol):void {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(this.id);
      oprot.writeFieldEnd();
      if (this.player != null) {
        oprot.writeFieldBegin(PLAYER_FIELD_DESC);
        oprot.writeString(this.player);
        oprot.writeFieldEnd();
      }
      if (this.location != null) {
        oprot.writeFieldBegin(LOCATION_FIELD_DESC);
        this.location.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SHIPS_FIELD_DESC);
      oprot.writeI32(this.ships);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public function toString():String {
      var ret:String = new String("Formation(");
      var first:Boolean = true;

      ret += "id:";
      ret += this.id;
      first = false;
      if (!first) ret +=  ", ";
      ret += "player:";
      if (this.player == null) {
        ret += "null";
      } else {
        ret += this.player;
      }
      first = false;
      if (!first) ret +=  ", ";
      ret += "location:";
      if (this.location == null) {
        ret += "null";
      } else {
        ret += this.location;
      }
      first = false;
      if (!first) ret +=  ", ";
      ret += "ships:";
      ret += this.ships;
      first = false;
      ret += ")";
      return ret;
    }

    public function validate():void {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

}
