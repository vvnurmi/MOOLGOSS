/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.moolgoss.service {

  import flash.utils.ByteArray;
  import flash.utils.Dictionary;

  import org.apache.thrift.*;
  import org.apache.thrift.meta_data.*;
  import org.apache.thrift.protocol.*;


  public class Command implements TBase   {
    private static const STRUCT_DESC:TStruct = new TStruct("Command");
    private static const TYPE_FIELD_DESC:TField = new TField("type", TType.I32, 1);
    private static const MOVE_FORMATION_DATA_FIELD_DESC:TField = new TField("moveFormationData", TType.STRUCT, 2);

    private var _type:int;
    public static const TYPE:int = 1;
    private var _moveFormationData:MoveFormationData;
    public static const MOVEFORMATIONDATA:int = 2;

    private var __isset_type:Boolean = false;

    public static const metaDataMap:Dictionary = new Dictionary();
    {
      metaDataMap[TYPE] = new FieldMetaData("type", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32));
      metaDataMap[MOVEFORMATIONDATA] = new FieldMetaData("moveFormationData", TFieldRequirementType.OPTIONAL, 
          new StructMetaData(TType.STRUCT, MoveFormationData));
    }
    {
      FieldMetaData.addStructMetaDataMap(Command, metaDataMap);
    }

    public function Command() {
    }

    public function get type():int {
      return this._type;
    }

    public function set type(type:int):void {
      this._type = type;
      this.__isset_type = true;
    }

    public function unsetType():void {
      this.__isset_type = false;
    }

    // Returns true if field type is set (has been assigned a value) and false otherwise
    public function isSetType():Boolean {
      return this.__isset_type;
    }

    public function get moveFormationData():MoveFormationData {
      return this._moveFormationData;
    }

    public function set moveFormationData(moveFormationData:MoveFormationData):void {
      this._moveFormationData = moveFormationData;
    }

    public function unsetMoveFormationData():void {
      this.moveFormationData = null;
    }

    // Returns true if field moveFormationData is set (has been assigned a value) and false otherwise
    public function isSetMoveFormationData():Boolean {
      return this.moveFormationData != null;
    }

    public function setFieldValue(fieldID:int, value:*):void {
      switch (fieldID) {
      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          this.type = value;
        }
        break;

      case MOVEFORMATIONDATA:
        if (value == null) {
          unsetMoveFormationData();
        } else {
          this.moveFormationData = value;
        }
        break;

      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function getFieldValue(fieldID:int):* {
      switch (fieldID) {
      case TYPE:
        return this.type;
      case MOVEFORMATIONDATA:
        return this.moveFormationData;
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public function isSet(fieldID:int):Boolean {
      switch (fieldID) {
      case TYPE:
        return isSetType();
      case MOVEFORMATIONDATA:
        return isSetMoveFormationData();
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function read(iprot:TProtocol):void {
      var field:TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case TYPE:
            if (field.type == TType.I32) {
              this.type = iprot.readI32();
              this.__isset_type = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case MOVEFORMATIONDATA:
            if (field.type == TType.STRUCT) {
              this.moveFormationData = new MoveFormationData();
              this.moveFormationData.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public function write(oprot:TProtocol):void {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(this.type);
      oprot.writeFieldEnd();
      if (this.moveFormationData != null) {
        oprot.writeFieldBegin(MOVE_FORMATION_DATA_FIELD_DESC);
        this.moveFormationData.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public function toString():String {
      var ret:String = new String("Command(");
      var first:Boolean = true;

      ret += "type:";
      var type_name:String = CommandType.VALUES_TO_NAMES[this.type];
      if (type_name != null) {
        ret += type_name;
        ret += " (";
      }
      ret += this.type;
      if (type_name != null) {
        ret += ")";
      }
      first = false;
      if (isSetMoveFormationData()) {
        if (!first) ret +=  ", ";
        ret += "moveFormationData:";
        if (this.moveFormationData == null) {
          ret += "null";
        } else {
          ret += this.moveFormationData;
        }
        first = false;
      }
      ret += ")";
      return ret;
    }

    public function validate():void {
      // check for required fields
      // check that fields of type enum have valid values
      if (isSetType() && !CommandType.VALID_VALUES.contains(type)){
        throw new TProtocolError(TProtocolError.UNKNOWN, "The field 'type' has been assigned the invalid value " + type);
      }
    }

  }

}
