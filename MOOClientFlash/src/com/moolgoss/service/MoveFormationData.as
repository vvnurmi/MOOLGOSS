/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moolgoss.service {

import org.apache.thrift.Set;
import flash.utils.ByteArray;
import flash.utils.Dictionary;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


  public class MoveFormationData implements TBase   {
    private static const STRUCT_DESC:TStruct = new TStruct("MoveFormationData");
    private static const FORMATION_FIELD_DESC:TField = new TField("formation", TType.I32, 1);
    private static const DESTINATION_FIELD_DESC:TField = new TField("destination", TType.STRUCT, 2);

    private var _formation:int;
    public static const FORMATION:int = 1;
    private var _destination:Location;
    public static const DESTINATION:int = 2;

    private var __isset_formation:Boolean = false;

    public static const metaDataMap:Dictionary = new Dictionary();
    {
      metaDataMap[FORMATION] = new FieldMetaData("formation", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32));
      metaDataMap[DESTINATION] = new FieldMetaData("destination", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, Location));
    }
    {
      FieldMetaData.addStructMetaDataMap(MoveFormationData, metaDataMap);
    }

    public function MoveFormationData() {
    }

    public function get formation():int {
      return this._formation;
    }

    public function set formation(formation:int):void {
      this._formation = formation;
      this.__isset_formation = true;
    }

    public function unsetFormation():void {
      this.__isset_formation = false;
    }

    // Returns true if field formation is set (has been assigned a value) and false otherwise
    public function isSetFormation():Boolean {
      return this.__isset_formation;
    }

    public function get destination():Location {
      return this._destination;
    }

    public function set destination(destination:Location):void {
      this._destination = destination;
    }

    public function unsetDestination():void {
      this.destination = null;
    }

    // Returns true if field destination is set (has been assigned a value) and false otherwise
    public function isSetDestination():Boolean {
      return this.destination != null;
    }

    public function setFieldValue(fieldID:int, value:*):void {
      switch (fieldID) {
      case FORMATION:
        if (value == null) {
          unsetFormation();
        } else {
          this.formation = value;
        }
        break;

      case DESTINATION:
        if (value == null) {
          unsetDestination();
        } else {
          this.destination = value;
        }
        break;

      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function getFieldValue(fieldID:int):* {
      switch (fieldID) {
      case FORMATION:
        return this.formation;
      case DESTINATION:
        return this.destination;
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public function isSet(fieldID:int):Boolean {
      switch (fieldID) {
      case FORMATION:
        return isSetFormation();
      case DESTINATION:
        return isSetDestination();
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function read(iprot:TProtocol):void {
      var field:TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case FORMATION:
            if (field.type == TType.I32) {
              this.formation = iprot.readI32();
              this.__isset_formation = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case DESTINATION:
            if (field.type == TType.STRUCT) {
              this.destination = new Location();
              this.destination.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public function write(oprot:TProtocol):void {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FORMATION_FIELD_DESC);
      oprot.writeI32(this.formation);
      oprot.writeFieldEnd();
      if (this.destination != null) {
        oprot.writeFieldBegin(DESTINATION_FIELD_DESC);
        this.destination.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public function toString():String {
      var ret:String = new String("MoveFormationData(");
      var first:Boolean = true;

      ret += "formation:";
      ret += this.formation;
      first = false;
      if (!first) ret +=  ", ";
      ret += "destination:";
      if (this.destination == null) {
        ret += "null";
      } else {
        ret += this.destination;
      }
      first = false;
      ret += ")";
      return ret;
    }

    public function validate():void {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

}
