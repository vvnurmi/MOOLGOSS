/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.moolgoss.service {

  import flash.utils.ByteArray;
  import flash.utils.Dictionary;

  import org.apache.thrift.*;
  import org.apache.thrift.meta_data.*;
  import org.apache.thrift.protocol.*;


  public class Planet implements TBase   {
    private static const STRUCT_DESC:TStruct = new TStruct("Planet");
    private static const ID_FIELD_DESC:TField = new TField("id", TType.I32, 1);
    private static const PLAYER_FIELD_DESC:TField = new TField("player", TType.STRING, 2);
    private static const NAME_FIELD_DESC:TField = new TField("name", TType.STRING, 3);
    private static const POPULATION_FIELD_DESC:TField = new TField("population", TType.I32, 4);
    private static const MAX_POPULATION_FIELD_DESC:TField = new TField("maxPopulation", TType.I32, 5);
    private static const ORBIT_FIELD_DESC:TField = new TField("orbit", TType.I32, 6);

    private var _id:int;
    public static const ID:int = 1;
    private var _player:String;
    public static const PLAYER:int = 2;
    private var _name:String;
    public static const NAME:int = 3;
    private var _population:int;
    public static const POPULATION:int = 4;
    private var _maxPopulation:int;
    public static const MAXPOPULATION:int = 5;
    private var _orbit:int;
    public static const ORBIT:int = 6;

    private var __isset_id:Boolean = false;
    private var __isset_population:Boolean = false;
    private var __isset_maxPopulation:Boolean = false;
    private var __isset_orbit:Boolean = false;

    public static const metaDataMap:Dictionary = new Dictionary();
    {
      metaDataMap[ID] = new FieldMetaData("id", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32));
      metaDataMap[PLAYER] = new FieldMetaData("player", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[NAME] = new FieldMetaData("name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[POPULATION] = new FieldMetaData("population", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32));
      metaDataMap[MAXPOPULATION] = new FieldMetaData("maxPopulation", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32));
      metaDataMap[ORBIT] = new FieldMetaData("orbit", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32));
    }
    {
      FieldMetaData.addStructMetaDataMap(Planet, metaDataMap);
    }

    public function Planet() {
    }

    public function get id():int {
      return this._id;
    }

    public function set id(id:int):void {
      this._id = id;
      this.__isset_id = true;
    }

    public function unsetId():void {
      this.__isset_id = false;
    }

    // Returns true if field id is set (has been assigned a value) and false otherwise
    public function isSetId():Boolean {
      return this.__isset_id;
    }

    public function get player():String {
      return this._player;
    }

    public function set player(player:String):void {
      this._player = player;
    }

    public function unsetPlayer():void {
      this.player = null;
    }

    // Returns true if field player is set (has been assigned a value) and false otherwise
    public function isSetPlayer():Boolean {
      return this.player != null;
    }

    public function get name():String {
      return this._name;
    }

    public function set name(name:String):void {
      this._name = name;
    }

    public function unsetName():void {
      this.name = null;
    }

    // Returns true if field name is set (has been assigned a value) and false otherwise
    public function isSetName():Boolean {
      return this.name != null;
    }

    public function get population():int {
      return this._population;
    }

    public function set population(population:int):void {
      this._population = population;
      this.__isset_population = true;
    }

    public function unsetPopulation():void {
      this.__isset_population = false;
    }

    // Returns true if field population is set (has been assigned a value) and false otherwise
    public function isSetPopulation():Boolean {
      return this.__isset_population;
    }

    public function get maxPopulation():int {
      return this._maxPopulation;
    }

    public function set maxPopulation(maxPopulation:int):void {
      this._maxPopulation = maxPopulation;
      this.__isset_maxPopulation = true;
    }

    public function unsetMaxPopulation():void {
      this.__isset_maxPopulation = false;
    }

    // Returns true if field maxPopulation is set (has been assigned a value) and false otherwise
    public function isSetMaxPopulation():Boolean {
      return this.__isset_maxPopulation;
    }

    public function get orbit():int {
      return this._orbit;
    }

    public function set orbit(orbit:int):void {
      this._orbit = orbit;
      this.__isset_orbit = true;
    }

    public function unsetOrbit():void {
      this.__isset_orbit = false;
    }

    // Returns true if field orbit is set (has been assigned a value) and false otherwise
    public function isSetOrbit():Boolean {
      return this.__isset_orbit;
    }

    public function setFieldValue(fieldID:int, value:*):void {
      switch (fieldID) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          this.id = value;
        }
        break;

      case PLAYER:
        if (value == null) {
          unsetPlayer();
        } else {
          this.player = value;
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          this.name = value;
        }
        break;

      case POPULATION:
        if (value == null) {
          unsetPopulation();
        } else {
          this.population = value;
        }
        break;

      case MAXPOPULATION:
        if (value == null) {
          unsetMaxPopulation();
        } else {
          this.maxPopulation = value;
        }
        break;

      case ORBIT:
        if (value == null) {
          unsetOrbit();
        } else {
          this.orbit = value;
        }
        break;

      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function getFieldValue(fieldID:int):* {
      switch (fieldID) {
      case ID:
        return this.id;
      case PLAYER:
        return this.player;
      case NAME:
        return this.name;
      case POPULATION:
        return this.population;
      case MAXPOPULATION:
        return this.maxPopulation;
      case ORBIT:
        return this.orbit;
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public function isSet(fieldID:int):Boolean {
      switch (fieldID) {
      case ID:
        return isSetId();
      case PLAYER:
        return isSetPlayer();
      case NAME:
        return isSetName();
      case POPULATION:
        return isSetPopulation();
      case MAXPOPULATION:
        return isSetMaxPopulation();
      case ORBIT:
        return isSetOrbit();
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function read(iprot:TProtocol):void {
      var field:TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case ID:
            if (field.type == TType.I32) {
              this.id = iprot.readI32();
              this.__isset_id = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case PLAYER:
            if (field.type == TType.STRING) {
              this.player = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case NAME:
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case POPULATION:
            if (field.type == TType.I32) {
              this.population = iprot.readI32();
              this.__isset_population = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case MAXPOPULATION:
            if (field.type == TType.I32) {
              this.maxPopulation = iprot.readI32();
              this.__isset_maxPopulation = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case ORBIT:
            if (field.type == TType.I32) {
              this.orbit = iprot.readI32();
              this.__isset_orbit = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public function write(oprot:TProtocol):void {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(this.id);
      oprot.writeFieldEnd();
      if (this.player != null) {
        oprot.writeFieldBegin(PLAYER_FIELD_DESC);
        oprot.writeString(this.player);
        oprot.writeFieldEnd();
      }
      if (this.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(POPULATION_FIELD_DESC);
      oprot.writeI32(this.population);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_POPULATION_FIELD_DESC);
      oprot.writeI32(this.maxPopulation);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ORBIT_FIELD_DESC);
      oprot.writeI32(this.orbit);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public function toString():String {
      var ret:String = new String("Planet(");
      var first:Boolean = true;

      ret += "id:";
      ret += this.id;
      first = false;
      if (isSetPlayer()) {
        if (!first) ret +=  ", ";
        ret += "player:";
        if (this.player == null) {
          ret += "null";
        } else {
          ret += this.player;
        }
        first = false;
      }
      if (!first) ret +=  ", ";
      ret += "name:";
      if (this.name == null) {
        ret += "null";
      } else {
        ret += this.name;
      }
      first = false;
      if (!first) ret +=  ", ";
      ret += "population:";
      ret += this.population;
      first = false;
      if (!first) ret +=  ", ";
      ret += "maxPopulation:";
      ret += this.maxPopulation;
      first = false;
      if (!first) ret +=  ", ";
      ret += "orbit:";
      ret += this.orbit;
      first = false;
      ret += ")";
      return ret;
    }

    public function validate():void {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

}
