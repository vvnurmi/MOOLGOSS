/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.moolgoss.service {

  import flash.utils.ByteArray;
  import flash.utils.Dictionary;

  import org.apache.thrift.*;
  import org.apache.thrift.meta_data.*;
  import org.apache.thrift.protocol.*;


  public class TimeSpan implements TBase   {
    private static const STRUCT_DESC:TStruct = new TStruct("TimeSpan");
    private static const MILLISECONDS_FIELD_DESC:TField = new TField("milliseconds", TType.I32, 1);

    private var _milliseconds:int;
    public static const MILLISECONDS:int = 1;

    private var __isset_milliseconds:Boolean = false;

    public static const metaDataMap:Dictionary = new Dictionary();
    {
      metaDataMap[MILLISECONDS] = new FieldMetaData("milliseconds", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32));
    }
    {
      FieldMetaData.addStructMetaDataMap(TimeSpan, metaDataMap);
    }

    public function TimeSpan() {
    }

    public function get milliseconds():int {
      return this._milliseconds;
    }

    public function set milliseconds(milliseconds:int):void {
      this._milliseconds = milliseconds;
      this.__isset_milliseconds = true;
    }

    public function unsetMilliseconds():void {
      this.__isset_milliseconds = false;
    }

    // Returns true if field milliseconds is set (has been assigned a value) and false otherwise
    public function isSetMilliseconds():Boolean {
      return this.__isset_milliseconds;
    }

    public function setFieldValue(fieldID:int, value:*):void {
      switch (fieldID) {
      case MILLISECONDS:
        if (value == null) {
          unsetMilliseconds();
        } else {
          this.milliseconds = value;
        }
        break;

      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function getFieldValue(fieldID:int):* {
      switch (fieldID) {
      case MILLISECONDS:
        return this.milliseconds;
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public function isSet(fieldID:int):Boolean {
      switch (fieldID) {
      case MILLISECONDS:
        return isSetMilliseconds();
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function read(iprot:TProtocol):void {
      var field:TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case MILLISECONDS:
            if (field.type == TType.I32) {
              this.milliseconds = iprot.readI32();
              this.__isset_milliseconds = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public function write(oprot:TProtocol):void {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MILLISECONDS_FIELD_DESC);
      oprot.writeI32(this.milliseconds);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public function toString():String {
      var ret:String = new String("TimeSpan(");
      var first:Boolean = true;

      ret += "milliseconds:";
      ret += this.milliseconds;
      first = false;
      ret += ")";
      return ret;
    }

    public function validate():void {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

}
