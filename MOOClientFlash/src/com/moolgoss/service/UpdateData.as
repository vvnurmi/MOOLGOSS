/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.moolgoss.service {

  import flash.utils.ByteArray;
  import flash.utils.Dictionary;

  import org.apache.thrift.*;
  import org.apache.thrift.meta_data.*;
  import org.apache.thrift.protocol.*;


  public class UpdateData implements TBase   {
    private static const STRUCT_DESC:TStruct = new TStruct("UpdateData");
    private static const STARDATE_FIELD_DESC:TField = new TField("stardate", TType.STRUCT, 1);
    private static const UPDATE_INTERVAL_FIELD_DESC:TField = new TField("updateInterval", TType.STRUCT, 2);
    private static const NEXT_UPDATE_FIELD_DESC:TField = new TField("nextUpdate", TType.STRUCT, 3);

    private var _stardate:DateTime;
    public static const STARDATE:int = 1;
    private var _updateInterval:TimeSpan;
    public static const UPDATEINTERVAL:int = 2;
    private var _nextUpdate:TimeSpan;
    public static const NEXTUPDATE:int = 3;


    public static const metaDataMap:Dictionary = new Dictionary();
    {
      metaDataMap[STARDATE] = new FieldMetaData("stardate", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, DateTime));
      metaDataMap[UPDATEINTERVAL] = new FieldMetaData("updateInterval", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, TimeSpan));
      metaDataMap[NEXTUPDATE] = new FieldMetaData("nextUpdate", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, TimeSpan));
    }
    {
      FieldMetaData.addStructMetaDataMap(UpdateData, metaDataMap);
    }

    public function UpdateData() {
    }

    public function get stardate():DateTime {
      return this._stardate;
    }

    public function set stardate(stardate:DateTime):void {
      this._stardate = stardate;
    }

    public function unsetStardate():void {
      this.stardate = null;
    }

    // Returns true if field stardate is set (has been assigned a value) and false otherwise
    public function isSetStardate():Boolean {
      return this.stardate != null;
    }

    public function get updateInterval():TimeSpan {
      return this._updateInterval;
    }

    public function set updateInterval(updateInterval:TimeSpan):void {
      this._updateInterval = updateInterval;
    }

    public function unsetUpdateInterval():void {
      this.updateInterval = null;
    }

    // Returns true if field updateInterval is set (has been assigned a value) and false otherwise
    public function isSetUpdateInterval():Boolean {
      return this.updateInterval != null;
    }

    public function get nextUpdate():TimeSpan {
      return this._nextUpdate;
    }

    public function set nextUpdate(nextUpdate:TimeSpan):void {
      this._nextUpdate = nextUpdate;
    }

    public function unsetNextUpdate():void {
      this.nextUpdate = null;
    }

    // Returns true if field nextUpdate is set (has been assigned a value) and false otherwise
    public function isSetNextUpdate():Boolean {
      return this.nextUpdate != null;
    }

    public function setFieldValue(fieldID:int, value:*):void {
      switch (fieldID) {
      case STARDATE:
        if (value == null) {
          unsetStardate();
        } else {
          this.stardate = value;
        }
        break;

      case UPDATEINTERVAL:
        if (value == null) {
          unsetUpdateInterval();
        } else {
          this.updateInterval = value;
        }
        break;

      case NEXTUPDATE:
        if (value == null) {
          unsetNextUpdate();
        } else {
          this.nextUpdate = value;
        }
        break;

      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function getFieldValue(fieldID:int):* {
      switch (fieldID) {
      case STARDATE:
        return this.stardate;
      case UPDATEINTERVAL:
        return this.updateInterval;
      case NEXTUPDATE:
        return this.nextUpdate;
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public function isSet(fieldID:int):Boolean {
      switch (fieldID) {
      case STARDATE:
        return isSetStardate();
      case UPDATEINTERVAL:
        return isSetUpdateInterval();
      case NEXTUPDATE:
        return isSetNextUpdate();
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function read(iprot:TProtocol):void {
      var field:TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case STARDATE:
            if (field.type == TType.STRUCT) {
              this.stardate = new DateTime();
              this.stardate.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case UPDATEINTERVAL:
            if (field.type == TType.STRUCT) {
              this.updateInterval = new TimeSpan();
              this.updateInterval.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case NEXTUPDATE:
            if (field.type == TType.STRUCT) {
              this.nextUpdate = new TimeSpan();
              this.nextUpdate.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public function write(oprot:TProtocol):void {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.stardate != null) {
        oprot.writeFieldBegin(STARDATE_FIELD_DESC);
        this.stardate.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.updateInterval != null) {
        oprot.writeFieldBegin(UPDATE_INTERVAL_FIELD_DESC);
        this.updateInterval.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.nextUpdate != null) {
        oprot.writeFieldBegin(NEXT_UPDATE_FIELD_DESC);
        this.nextUpdate.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public function toString():String {
      var ret:String = new String("UpdateData(");
      var first:Boolean = true;

      ret += "stardate:";
      if (this.stardate == null) {
        ret += "null";
      } else {
        ret += this.stardate;
      }
      first = false;
      if (!first) ret +=  ", ";
      ret += "updateInterval:";
      if (this.updateInterval == null) {
        ret += "null";
      } else {
        ret += this.updateInterval;
      }
      first = false;
      if (!first) ret +=  ", ";
      ret += "nextUpdate:";
      if (this.nextUpdate == null) {
        ret += "null";
      } else {
        ret += this.nextUpdate;
      }
      first = false;
      ret += ")";
      return ret;
    }

    public function validate():void {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

}
